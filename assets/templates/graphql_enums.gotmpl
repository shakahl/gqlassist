{{- .FileHeader }}

package {{ .PackageName }}

import (
    "bytes"
    "encoding/json"
    "strings"
    // "fmt"
)

{{ range .Schema.data.__schema.types | filterBy "kind" "ENUM" | sortByName }}
    {{- if and (eq .kind "ENUM") (not (isExcluded .name)) -}}
        {{- template "enum" . -}}
    {{- end -}}
{{ end }}


{{- define "enum" -}}
    // {{ .name | enumType }} @graphql="{{ .name }}" {{if .description}}{{.description | clean | formatDescription}}{{end}}
    {{ if feature "use_integer_enums" -}}
        type {{ .name | enumType }} int
    {{- else -}}
        type {{ .name | enumType }} string
    {{- end }}

    // {{ .name | enumType }} @graphql="{{ .name }}"  enum type values. {{if .description}}{{.description | clean | formatDescription}}{{else}}{{end}}
    const (
    {{ if feature "use_integer_enums" -}}
        {{- range $i, $e := .enumValues | sortByNameRev }}
            {{- $.name | enumType}}{{$e.name | enumIdentifierValueSuffix}} {{if first $i $}}{{$.name | enumType}} = iota + 1 {{end}} // {{if .description}}{{.description | clean | formatDescription}}{{end}}
        {{ end -}}
    {{- else -}}
        {{- range .enumValues sortByNameRev}}
            {{$.name | enumType}}{{.name | enumIdentifierValueSuffix}} {{$.name | identifier}} = {{.name | quote}} // @graphql="{{$.name}}#{{.name}}" {{if .description}}{{.description | clean | formatDescription}}{{end}}
        {{ end -}}
    {{- end -}}
    )
    var (
    {{ if feature "use_integer_enums" -}}
        {{- .name | enumType}}__toString = map[{{- .name | enumType}}]string{
        {{ range .enumValues | sortByNameRev -}}
            {{ $.name | enumType }}{{ .name | enumIdentifierValueSuffix }}: {{.name | quote -}},
        {{ end }}
        }

        {{ .name | enumType}}__toID = map[string]{{- .name | enumType}}{
        {{ range .enumValues | sortByNameRev -}}
            {{ .name | quote }}: {{- $.name | enumType }}{{.name | enumIdentifierValueSuffix }},
        {{ end }}
        }
        /*
        {{.name | enumAllValuesIdentifier}} = []string{
        {{range .enumValues | sortByNameRev}}{{.name | quote}},{{ end }}
        }
        */
    {{- else -}}
        {{ .name | enumAllValuesIdentifier }} = map[string]string{
        {{ range .enumValues | sortByNameRev -}}
            {{- .name | quote -}}: {{ .name | quote -}},
        {{ end }}
        }

    {{- end }}
    )

    func (e {{.name | enumType}}) String() string {
    {{ if feature "use_integer_enums" -}}
        return {{ .name | enumType }}__toString[e]
        /*
        return [...]string{
        {{- range .enumValues | sortByNameRev -}}
            {{- .name | quote -}},
        {{- end -}}
        }[e]
        */
    {{- else -}}
        s := string(e)
        if v, ok := {{.name | enumAllValuesIdentifier}}[s]; ok {
        return v
        }
        panic(fmt.Errorf("Invalid ENUM value detected: %+v", e))
    {{- end }}
    }

    // MarshalJSON marshals the enum as a quoted json string
    func (e {{.name | enumType}}) MarshalJSON() ([]byte, error) {
    buffer := bytes.NewBufferString("\"")
    buffer.WriteString({{- .name | enumType -}}__toString[e])
    buffer.WriteString("\"")
    return buffer.Bytes(), nil
    }

    // UnmarshalJSON unmashals a quoted json string to the enum value
    func (e *{{.name | enumType}}) UnmarshalJSON(b []byte) error {
    var j string
    err := json.Unmarshal(b, &j)
    if err != nil {
    return err
    }
    j = strings.ToUpper(j)
    // Note that if the string cannot be found then it will be set to the zero value.
    *e = {{ .name | enumType }}__toID[j]
    return nil
    }

    func New{{.name | enumType}}(s string) *{{.name | enumType}} {
    if v, ok := {{ .name | enumType }}__toID[s]; ok {
    return &v
    }
    return nil
    }

{{- end -}}

