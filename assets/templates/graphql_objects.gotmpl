{{- .FileHeader }}

package {{ .PackageName }}

import (
"time"

"github.com/google/uuid"
)

// Object represents one of the Input structs:
//
// {{join (extractField "name" (filterBy "kind" "OBJECT" .Schema.data.__schema.types)) ", "}}.

type Object interface{}

type GQLMeta struct {
// GQLTypeName @graphql="__typename" Is a meta field containing the GraphQL type name
GQLTypeName *string ` + "`" + `json:"__typename,omitempty"` + "`" + `
}

var (
TypeMapObjects = map[string]string{
{{ range .Schema.data.__schema.types | filterBy "kind" "OBJECT" | sortByName -}}{{if eq .kind "OBJECT" -}}
    {{ .name | identifier | quote }}: {{ .name | quote }},
{{ end }}{{- end }}
}
ReverseTypeMapObjects = map[string]string{
{{ range .Schema.data.__schema.types | filterBy "kind" "OBJECT" | sortByName -}}{{ if eq .kind "OBJECT" -}}
    {{ .name | quote }}: {{ .name | identifier| quote }},
{{ end }}{{- end }}
}
)

{{range .Schema.data.__schema.types | filterBy "kind" "OBJECT" | sortByName}}{{if eq .kind "OBJECT"}}
    {{template "object" .}}
{{end}}{{end}}


{{- define "object" -}}
    // {{ .name | identifier }} @graphql="{{ .name }}" {{ if .description }}{{ .description | clean | formatDescription }}{{ end }}
    type {{.name | identifier }} struct {{- "{" }}
    GQLMeta
    {{- range .fields -}}
        {{- if eq .type.kind "NON_NULL" }}
            // {{ .name | identifier }} @graphql="{{ .name }}" {{ if .description }}{{ .description | clean | formatDescription }}{{ end }} (Required.)
            {{ .name | identifier }} {{ .type | type }} ` + "`" + `json:"{{ .name }}" graphql:"!{{ .name }}"` + "`" + `
        {{- end -}}
        {{- if ne .type.kind "NON_NULL" }}
            // {{ .name | identifier }} @graphql="{{ .name }}" {{ if .description }}{{ .description | clean | formatDescription }}{{ end }} (Optional.)
            {{ .name | identifier }} {{ .type | type }} ` + "`" + `json:"{{ .name }},omitempty" graphql:"{{ .name }}"` + "`" + `
        {{- end -}}
    {{- end -}}
    }
{{- end -}}
